@using Newtonsoft.Json
@{
    var sites = ViewBag.SiteList as List<DT_App.Models.SiteModel>;
    var dataset = ViewBag.DataList as List<DT_App.Models.DataView>;
    var siteJson = JsonConvert.SerializeObject(sites);
    var forecastJson = JsonConvert.SerializeObject(dataset);
    var lastqueryDateTime = (DateTime)ViewBag.LastQueryDate;
    ViewData["Title"] = "Forecast";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .top-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 20px;
        background-color: #f5f5f5;
    }

    .top-bar h2 {
        margin: 0;
    }

    .menu-buttons {
        display: flex;
        align-items: center;
    }

    .menu-buttons button {
        width: 50px;
        height: 50px;
        margin-left: 10px;
        background-color: #000;
        color: white;
        border: none;
        font-size: 1.2em;
        cursor: pointer;
        border-radius: 8px;
    }

    .menu-buttons button:hover {
        background-color: #555;
    }

    .main-container {
        display: flex;
        height: 80vh;
        width: 100%;
    }

    .test-container {
        width: 30%;
        background-color: #eee;
        padding: 20px;
        overflow-y: auto;
    }

    .content {
        width: 70%;
        position: relative;
    }

    #contentContainer {
        width: 100%;
        height: 100%;
    }

    #cesiumContainer {
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;
        overflow: hidden;
    }

    .north-indicator {
        display: flex;
        align-items: center;
        margin-right: 15px;
        font-weight: bold;
        color: Red;
        font-size: 18px;
    }

    .north-indicator i {
        transform: rotate(0deg);
        margin-right: 5px;
    }

    .menu-buttons button.active {
        background-color: #555;
        outline: 2px solid black;
        outline-offset: 2px;
    }
</style>

<script>
    window.siteData = @Html.Raw(siteJson);
    window.forecastData = @Html.Raw(forecastJson);
    console.log("Loaded siteData globally:", window.siteData);
    console.log("Loaded forecast globally:", window.forecastData);
</script>
<div class="top-bar">
    <h2>
        @ViewData["Title"] - <label id="lblSubView">Map View</label>
    </h2>
    <div class="north-indicator">
        <i class="fas fa-long-arrow-alt-up"></i> N
    </div>

    <div class="menu-buttons">
        <button id="btnTraffic"><i class="fas fa-car"></i></button>
        <button id="btnWeather"><i class="fas fa-cloud-sun"></i></button>
        <button id="btnPollution"><i class="fas fa-smog"></i></button>
        <button id="btnCombined"><i class="fas fa-layer-group"></i></button>
    </div>
</div>

<div class="main-container">
    <div class="test-container">
        <p>Filters:</p>
        <div class="form-group">
            <label>Date</label>
            <input type="date" id="forecastDate" class="form-control" value="@lastqueryDateTime.ToString("yyyy-MM-dd")" />

            <label class="form-control-label mt-2">Hour</label>
            <select id="forecastHour" class="form-control">
                @for (int hour = 0; hour < 24; hour++)
                {
                    @if (lastqueryDateTime.Hour == hour)
                    {
                        <option value="@hour.ToString("D2")" selected>@hour.ToString("D2")</option>
                    }
                    else
                    {
                        <option value="@hour.ToString("D2")">@hour.ToString("D2")</option>
                    }

                }
            </select>
        </div>
        <div id="siteSelector" class="mt-3">
            <label class="form-control-label">Select Sites and Traffic Density</label>
        </div>
        <button class="btn btn-primary mt-3" id="btnForecast">Generate Forecast</button>
    </div>

    <div class="content" id="contentContainer">
        <div id="loadingSpinner" class="spinner-border text-primary" style="display:none; position:absolute; top:50%; left:50%; z-index:1000;" role="status"></div>
        <div id="alertBox" class="alert" style="display:none; position:absolute; top:10px; right:10px; z-index:1000;"></div>
        <!-- CesiumJS container -->
        <div id="cesiumContainer"></div>
    </div>
</div>

@section Scripts {
    <script>
        Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIwMzQ2N2UzMi0wNzIzLTQzN2ItYWExYi0xZWM5MWZjNTQzNjUiLCJpZCI6MzE5MDk5LCJpYXQiOjE3NTE4NjY0NTJ9.Z7ZakLa9T-7er2aTf9m_MEhF8Di-gTDted1Xn-igj9U';
        console.log("locationData", window.siteData);
        console.log("forecastData" ,window.forecastData);
        window.siteData.forEach((site, index) => {
            $('#siteSelector').append(`
                <div class="form-check mt-2">
                    <input type="checkbox" class="form-check-input site-check" id="site_${index}" data-lat="${site.latitude}" data-lon="${site.longitude}">
                    <label class="form-check-label" for="site_${index}">${site.site_name}</label>
                    <select class="form-control form-control-sm traffic-density mt-1">
                        <option value="low">Low</option>
                        <option value="moderate_low">Moderate Low</option>
                        <option value="moderate" selected>Moderate</option>
                        <option value="moderate_high">Moderate High</option>
                        <option value="high">High</option>
                    </select>
                </div>
            `);
        });
        var viewer = new Cesium.Viewer("cesiumContainer", {
            animation: false,
            baseLayerPicker: true,
            navigationHelpButton: false,
            sceneModePicker: true,
            homeButton: false,
            geocoder: true,
            fullscreenButton: true,
            timeline: false
            });

        // onpageshow 3d tiles
        // async function loadTileset(){
        //     const osmBuildingsTileset = await Cesium.createOsmBuildingsAsync();
        //     viewer.scene.primitives.add(osmBuildingsTileset);
        // }

        // loadTileset();

        function clearEntities() {
            viewer.entities.removeAll();
        }

        // --- Load Sites pin ---

        var pinBuilder = new Cesium.PinBuilder();

        function loadSites(){
            window.siteData.forEach(function(point) {
                viewer.entities.add({
                    name: point.site_code,
                    position: Cesium.Cartesian3.fromDegrees(point.longitude, point.latitude, 1.0),
                    billboard: {
                        image: pinBuilder.fromUrl("./images/sensor.png", Cesium.Color.fromCssColorString('#3f51b5'), 48),
                    },
                    label: {
                        text: point.site_name,
                        font: "14pt sans-serif",
                        style: Cesium.LabelStyle.FILL_AND_OUTLINE,
                        outlineWidth: 2,
                        verticalOrigin: Cesium.VerticalOrigin.BOTTOM,
                        pixelOffset: new Cesium.Cartesian2(0, 10)
                    }
                });
            });
        }


        // --- show traffic view ---
        function showTraffic(){
                window.forecastData.forEach(point => {
                const pos = Cesium.Cartesian3.fromDegrees(point.longitude, point.latitude);

                // --------- Traffic via PointGraphics -----------
                const trafficCount = getTrafficDensityCount(point.traffic_density); // defines how many points
                const trafficColor = getTrafficFlowColor(point.traffic_flow); // inverse of density

                for (let i = 0; i < trafficCount; i++) {
                    // slight random offset to avoid exact overlap
                    const offset = Cesium.Cartesian3.fromDegrees(
                        point.longitude + (Math.random() - 0.5) * 0.0001,
                        point.latitude + (Math.random() - 0.5) * 0.0001
                    );

                    viewer.entities.add({
                        name: `Traffic: ${point.traffic_density}`,
                        position: offset,
                        point: {
                            pixelSize: 20,
                            color: trafficColor,
                        }
                    });
                }
            });
        }

        // --- Traffic Density Count ---
        function getTrafficDensityCount(density) {
            switch (density) {
                case 'low': return 1;
                case 'moderate_low': return 3;
                case 'moderate': return 5;
                case 'moderate_high': return 7;
                case 'high': return 10;
                default: return 1;
            }
        }

        // --- Traffic Flow Color (inverse of density) ---
        function getTrafficFlowColor(flow) {
            switch (flow) {
                case 'low': return Cesium.Color.RED;
                case 'moderate_low': return Cesium.Color.ORANGE;
                case 'moderate': return Cesium.Color.YELLOW;
                case 'moderate_high': return Cesium.Color.GREEN;
                case 'high': return Cesium.Color.BLUE;
                default: return Cesium.Color.BLUE;
            }
        }
        // --- end traffic methods ---


        // --- Color for AQI level ---

        function showPollution(){
                window.forecastData.forEach(point => {
                const pos = Cesium.Cartesian3.fromDegrees(point.longitude, point.latitude);

                // --------- AQI via EllipsoidGraphics -----------
                const aqiColor = getAqiColor(point.aqi);
                viewer.entities.add({
                    name: `AQI: ${point.aqi}`,
                    position: pos,
                    ellipsoid: {
                        radii: new Cesium.Cartesian3(200, 200, 200),
                        material: aqiColor.withAlpha(0.3),
                    }
                });
            });
        }

        function getAqiColor(aqi) {
            switch (aqi) {
                case 1: return Cesium.Color.LIME;
                case 2: return Cesium.Color.YELLOW;
                case 3: return Cesium.Color.BLUE;
                case 4: return Cesium.Color.ORANGE;
                case 5: return Cesium.Color.RED;
                default: return Cesium.Color.GRAY;
            }
        }

        // --- end pollution methods

        // --- show weather view ---
        function showWeather(){
                window.forecastData.forEach(point => {
                const pos = Cesium.Cartesian3.fromDegrees(point.longitude, point.latitude);

                // --------- Weather via PolylineArrow -----------
                addCenteredWindArrow(viewer, point.latitude, point.longitude, point.wind_deg, point.wind_speed);

            });
        }

        // --- Weather/ Wind Data---
        function addCenteredWindArrow(viewer, lat, lon, wind_deg, wind_speed) {
            const length = 0.005 * wind_speed; // arrow total length in degrees
            const heading = Cesium.Math.toRadians(wind_deg);

            // Compute start and end points around the center
            const dx = (length / 2) * Math.sin(heading);
            const dy = (length / 2) * Math.cos(heading);

            const startLon = lon - dx;
            const startLat = lat - dy;
            const endLon = lon + dx;
            const endLat = lat + dy;

            viewer.entities.add({
                polyline: {
                    positions: Cesium.Cartesian3.fromDegreesArray([
                        startLon, startLat,
                        endLon, endLat
                    ]),
                    width: 8,
                    material: new Cesium.PolylineArrowMaterialProperty(Cesium.Color.CYAN),
                },
                label: {
                    text: `💨 ${wind_speed.toFixed(1)} m/s`,
                    font: '14px sans-serif',
                    fillColor: Cesium.Color.DODGERBLUE,
                    showBackground: true,
                    backgroundColor: Cesium.Color.WHITE.withAlpha(0.6),
                    verticalOrigin: Cesium.VerticalOrigin.BOTTOM,
                    pixelOffset: new Cesium.Cartesian2(0, -20),
                    position: Cesium.Cartesian3.fromDegrees(lon, lat),
                }
            });
        }
        // --- end weather methods ---

        function showCombined() {
            showTraffic();
            showWeather();
            showPollution();
        }


        function computeGeographicMidpoint(locations) {
            let x = 0, y = 0, z = 0;

            locations.forEach(loc => {
                const latRad = Cesium.Math.toRadians(loc.latitude);
                const lonRad = Cesium.Math.toRadians(loc.longitude);

                x += Math.cos(latRad) * Math.cos(lonRad);
                y += Math.cos(latRad) * Math.sin(lonRad);
                z += Math.sin(latRad);
            });

            const total = locations.length;
            x /= total;
            y /= total;
            z /= total;

            const hyp = Math.sqrt(x * x + y * y);
            const lat = Math.atan2(z, hyp);
            const lon = Math.atan2(y, x);

            return {
                latitude: Cesium.Math.toDegrees(lat),
                longitude: Cesium.Math.toDegrees(lon)
            };
        }

        function showAlert(msg, type) {
            $('#alertBox').removeClass().addClass(`alert alert-${type}`).text(msg).fadeIn();
            setTimeout(() => { $('#alertBox').fadeOut(); }, 4000);
        }

        // -- Page events ---

        $("#btnTraffic").click(function (e) {
            e.preventDefault();
            clearEntities();
            loadSites();
            showTraffic();
        });

        $("#btnWeather").click(function (e) {
            e.preventDefault();
            clearEntities();
            loadSites();
            showWeather();
        });

        $("#btnPollution").click(function (e) {
            e.preventDefault();
            clearEntities();
            loadSites();
            showPollution();
        });

        $("#btnCombined").click(function (e) {
            e.preventDefault();
            clearEntities();
            loadSites();
            showCombined();
        });

        $('.menu-buttons button').on('click', function () {
            $('.menu-buttons button').removeClass('active');
            $(this).addClass('active');
        });

        $('#btnForecast').click(async function () {
            const date = $('#forecastDate').val();
            const hour = $('#forecastHour').val();
            if (!date || !hour) {
                showAlert("Please select date and hour","warning");
                return;
            }
            const datetime = `${date} ${hour}:00:00`;

            const traffic_data_list = [];
            $('.site-check:checked').each(function () {
                const lat = parseFloat($(this).data('lat'));
                const lon = parseFloat($(this).data('lon'));
                const density = $(this).siblings('select.traffic-density').val();
                traffic_data_list.push({ latitude: lat, longitude: lon, traffic_density: density });
            });
            if (traffic_data_list.length === 0) {
                showAlert("Select at least one site.", "warning");
                return;
            }

            const payload = {
                datetime: datetime,
                traffic_data: traffic_data_list
            };


            $('#loadingSpinner').show();
            try{
            const response = await fetch('/Forecast/GetForecastDataByDate', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            const result = await response.json();
            if (result && result.data) {
                window.forecastData = result.data;
                clearEntities();
                loadSites();
                showCombined();
            } else {
                showAlert("No forecast data returned.","warning");
            }
            } catch (error) {
                console.error("Error fetching forecast data:", error);
                showAlert("Failed to fetch forecast data. Please try again.", "danger");
            } finally {
                $('#loadingSpinner').hide();
            }
        });

        // -- page events end ---


        // -- default actions ---
        var centrePoint = computeGeographicMidpoint(window.siteData);

        // Camera View set
        viewer.camera.setView({
            destination: Cesium.Cartesian3.fromDegrees(centrePoint.longitude, centrePoint.latitude, 2000.0),
            orientation: {
                heading: Cesium.Math.toRadians(0.0),
                pitch: Cesium.Math.toRadians(-40.0),
                roll: 0.0
            }
        });

        clearEntities();
        loadSites();
        showCombined();

    </script>
}