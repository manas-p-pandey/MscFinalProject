@using Newtonsoft.Json
@{
    var sites = ViewBag.SiteList as List<DT_App.Models.SiteModel>;
    var dataset = ViewBag.DataList as List<DT_App.Models.DataView>;
    var siteJson = JsonConvert.SerializeObject(sites);
    var forecastJson = JsonConvert.SerializeObject(dataset);
    var lastqueryDateTime = (DateTime)ViewBag.LastQueryDate;
    ViewData["Title"] = "Forecast";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .top-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 20px;
        background-color: #f5f5f5;
    }

    .top-bar h2 {
        margin: 0;
    }

    .menu-buttons {
        display: flex;
        align-items: center;
    }

    .menu-buttons button {
        width: 50px;
        height: 50px;
        margin-left: 10px;
        background-color: #000;
        color: white;
        border: none;
        font-size: 1.2em;
        cursor: pointer;
        border-radius: 8px;
    }

    .menu-buttons button:hover {
        background-color: #555;
    }

    .main-container {
        display: flex;
        height: 80vh;
        width: 100%;
    }

    .test-container {
        width: 30%;
        background-color: #eee;
        padding: 20px;
        overflow-y: auto;
    }

    .content {
        width: 70%;
        position: relative;
    }

    #contentContainer {
        width: 100%;
        height: 100%;
    }

    #cesiumContainer {
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;
        overflow: hidden;
    }

    .north-indicator {
        display: flex;
        align-items: center;
        margin-right: 15px;
        font-weight: bold;
        color: Red;
        font-size: 18px;
    }

    .north-indicator i {
        transform: rotate(0deg);
        margin-right: 5px;
    }

    .menu-buttons button.active {
        background-color: #555;
        outline: 2px solid black;
        outline-offset: 2px;
    }

    #siteDetailOverlay {
        position: absolute;
        top: 180px;
        right: 50px;
        background: rgba(255, 255, 255, 0.9);
        padding: 15px;
        border-radius: 10px;
        z-index: 999;
        width: 300px;
        max-height: 400px;
        overflow-y: auto;
        display: none;
        font-size: 0.9em;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
    }

    #northArrow {
        transition: transform 0.3s ease;
    }
</style>

<script>
    window.siteData = @Html.Raw(siteJson);
    window.forecastData = @Html.Raw(forecastJson);
    console.log("Loaded siteData globally:", window.siteData);
    console.log("Loaded forecast globally:", window.forecastData);
</script>
<div class="top-bar">
    <h2>
        @ViewData["Title"] - <label id="lblSubView">Map View</label>
    </h2>
    <div class="north-indicator">
        <i id="northArrow" class="fas fa-long-arrow-alt-up"></i> N
    </div>

    <div class="menu-buttons">
        <button id="btnTraffic"><i class="fas fa-car"></i></button>
        <button id="btnWeather"><i class="fas fa-cloud-sun"></i></button>
        <button id="btnPollution"><i class="fas fa-smog"></i></button>
        <button id="btnCombined"><i class="fas fa-layer-group"></i></button>
    </div>
</div>
<div id="siteDetailOverlay">
    <button type="button" id="closeOverlayBtn" style="float:right; border:none; background:none; font-weight:bold; font-size:16px;">×</button>
    <div id="siteOverlayContent"></div>
</div>
<div class="main-container">
    <div class="test-container">
        <p>Filters:</p>
        <div class="form-group">
            <label>Current / FutureDate (BST)</label>
            <input type="date" id="queryDate" class="form-control" value="@lastqueryDateTime.ToString("yyyy-MM-dd")" />

            <label class="form-control-label mt-2">Hour</label>
            <select id="queryHour" class="form-control">
                @for (int hour = 0; hour < 24; hour++)
                {
                    @if (lastqueryDateTime.Hour == hour)
                    {
                        <option value="@hour.ToString("D2")" selected>@hour.ToString("D2")</option>
                    }
                    else
                    {
                        <option value="@hour.ToString("D2")">@hour.ToString("D2")</option>
                    }

                }
            </select>
        </div><br/>
        <button class="btn btn-secondary mb-2" id="btnOpenOverlay">Add Parameters +</button><br/>
        <div id="hiddenSiteSelector" style="display:none;"></div>
        <div id="mapLegend" style="margin-top: 20px; padding: 10px; background: #f8f9fa; border: 1px solid #ccc; border-radius: 8px;">
            <h6>Legend</h6>

            <div><strong>Traffic:</strong></div>
            <ul style="padding-left: 20px;">
                <li><span style="display:inline-block;width:15px;height:15px;background:red;margin-right:5px;"></span> Low Flow (High Density)</li>
                <li><span style="display:inline-block;width:15px;height:15px;background:orange;margin-right:5px;"></span> Moderate Low Flow</li>
                <li><span style="display:inline-block;width:15px;height:15px;background:yellow;margin-right:5px;"></span> Moderate Flow</li>
                <li><span style="display:inline-block;width:15px;height:15px;background:cyan;margin-right:5px;"></span> Moderate High Flow</li>
                <li><span style="display:inline-block;width:15px;height:15px;background:lime;margin-right:5px;"></span> High Flow (Low Density)</li>
            </ul>

            <div><strong>Weather:</strong></div>
            <ul style="padding-left: 20px;">
                <li><span style="display:inline-block;width:20px;height:8px;background:cyan;margin-right:5px;"></span> Wind Direction (Arrow)</li>
                <li><i style="font-size: 0.9em;">Label shows wind speed (e.g. 💨 3.5 m/s)</i></li>
            </ul>

            <div><strong>Air Quality (AQI):</strong></div>
            <ul style="padding-left: 20px;">
                <li><span style="display:inline-block;width:15px;height:15px;background:lime;opacity:0.5;margin-right:5px;"></span> AQI 1 - Good</li>
                <li><span style="display:inline-block;width:15px;height:15px;background:cyan;opacity:0.5;margin-right:5px;"></span> AQI 2 - Fair</li>
                <li><span style="display:inline-block;width:15px;height:15px;background:yellow;opacity:0.5;margin-right:5px;"></span> AQI 3 - Moderate</li>
                <li><span style="display:inline-block;width:15px;height:15px;background:orange;opacity:0.5;margin-right:5px;"></span> AQI 4 - Poor</li>
                <li><span style="display:inline-block;width:15px;height:15px;background:red;opacity:0.5;margin-right:5px;"></span> AQI 5 - Very Poor</li>
            </ul>
        </div>
    </div>
    <div id="forecastOverlay" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background:rgba(0,0,0,0.6); z-index:1050;">
        <div style="background:white; width:600px; max-height:80vh; margin:5% auto; padding:20px; overflow-y:auto; border-radius:8px; position:relative;">
            <h4>Add Forecast Parameters</h4>
            <div class="mt-3 text-end">
                <button class="btn btn-primary" id="btnSaveOverlay">Save</button>
                <button class="btn btn-secondary" id="btnCloseOverlay">Close</button>
            </div>
            <div class="form-check mb-2">
                <input type="checkbox" class="form-check-input" id="masterCheck" />
                <label for="masterCheck" class="form-check-label"><strong>Select All Sites</strong></label>
            </div>
            <div id="overlaySiteSelector"></div>
        </div>
    </div>

    <div class="content" id="contentContainer">
        <div id="loadingSpinner" class="spinner-border text-primary" style="display:none; position:absolute; top:50%; left:50%; z-index:1000;" role="status"></div>
        <div id="alertBox" class="alert" style="display:none; position:absolute; top:10px; right:10px; z-index:1000;"></div>
        <!-- CesiumJS container -->
        <div id="cesiumContainer"></div>
    </div>
</div>

@section Scripts {
    <script>
        Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIwMzQ2N2UzMi0wNzIzLTQzN2ItYWExYi0xZWM5MWZjNTQzNjUiLCJpZCI6MzE5MDk5LCJpYXQiOjE3NTE4NjY0NTJ9.Z7ZakLa9T-7er2aTf9m_MEhF8Di-gTDted1Xn-igj9U';
        console.log("locationData", window.siteData);
        console.log("forecastData" ,window.forecastData);
        var overlaySelections = {};
        window.siteData.forEach((site, index) => {
            $('#hiddenSiteSelector').append(`
                <div class="form-check mt-2">
                    <input type="checkbox" class="form-check-input site-check" id="site_${index}" data-lat="${site.latitude}" data-lon="${site.longitude}">
                    <label class="form-check-label" for="site_${index}">${site.site_name}</label>
                    <select class="form-control form-control-sm traffic-density mt-1">
                        <option value="low">Lows</option>
                        <option value="moderate_low">Moderate Low</option>
                        <option value="moderate" selected>Moderate</option>
                        <option value="moderate_high">Moderate High</option>
                        <option value="high">High</option>
                    </select>
                </div>
            `);
        });
        const viewer = new Cesium.Viewer("cesiumContainer", {
            terrain: Cesium.Terrain.fromWorldTerrain(),
            animation: false,
            baseLayerPicker: true,
            navigationHelpButton: false,
            sceneModePicker: true,
            homeButton: false,
            geocoder: true,
            fullscreenButton: true,
            timeline: false
            });

        viewer.scene.globe.depthTestAgainstTerrain = false; // Enable depth testing against terrain

        // onpageshow 3d tiles
        async function loadTileset(){
            try{
                const osmBuildingsTileset = await Cesium.createOsmBuildingsAsync();
                viewer.scene.primitives.add(osmBuildingsTileset);
            }catch (error) {
              console.log(`Error loading tileset: ${error}`);
            }
        }
        loadTileset();

        function clearEntities() {
            viewer.entities.removeAll();
        }

        // --- Load Sites pin ---

        var pinBuilder = new Cesium.PinBuilder();
        function kelvinToC(k) { return (k - 273.15).toFixed(1); }

        function buildSiteOverlayContent(data) {
            return `
                <div><strong>Site:</strong>📍 ${data.site_name} (${data.site_code})</div>
                <hr/>
                <div><strong>☀️ Weather</strong></div>
                <div>Condition: ${data.weather_main}</div>
                <div>Temp: ${kelvinToC(data.temp)} °C</div>
                <div>Feels Like: ${kelvinToC(data.feels_like)} °C</div>
                <div>Humidity: ${data.humidity}%</div>
                <div>Pressure: ${data.pressure} hPa</div>
                <div>Clouds: ${data.clouds}%</div>
                <div>Wind: 💨${data.wind_speed} m/s, ➜${data.wind_deg}°</div>
                <hr/>
                <div><strong>🏭 AQI & Pollutants</strong></div>
                <div>AQI: ${data.aqi}</div>
                <div>CO: ${data.co} (μg/m³)</div>
                <div>NO: ${data.no} (μg/m³)</div>
                <div>NO₂: ${data.no2} (μg/m³)</div>
                <div>O₃: ${data.o3} (μg/m³)</div>
                <div>SO₂: ${data.so2} (μg/m³)</div>
                <div>PM2.5: ${data.pm2_5} (μg/m³)</div>
                <div>PM10: ${data.pm10} (μg/m³)</div>
                <div>NH₃: ${data.nh3} (μg/m³)</div>
                <hr/>
                <div><strong>🚗 Traffic</strong></div>
                <div>Flow: ${data.traffic_flow}</div>
                <div>Density: ${data.traffic_density}</div>
            `;
        }

        function loadSites() {
            window.siteData.forEach(function (point) {
                viewer.entities.add({
                    name: point.site_name,
                    position: Cesium.Cartesian3.fromDegrees(point.longitude, point.latitude, 5),
                    billboard: {
                        image: pinBuilder.fromUrl("./images/sensor.png", Cesium.Color.fromCssColorString('#3f51b5'), 48),
                        heightReference: Cesium.HeightReference.CLAMP_TO_GROUND,
                    },
                    label: {
                        text: point.site_code,
                        font: "14pt sans-serif",
                        style: Cesium.LabelStyle.FILL_AND_OUTLINE,
                        heightReference: Cesium.HeightReference.CLAMP_TO_GROUND,
                        outlineWidth: 2,
                        verticalOrigin: Cesium.VerticalOrigin.TOP,
                        pixelOffset: new Cesium.Cartesian2(0, -50)
                    },
                    properties: {
                        type: 'site',
                        site_code: point.site_code
                    }
                });
            });
            loadHandlers();
        }

        // --- end site data ---


        // --- show traffic view ---
        function showTraffic(){
            window.historicalData.forEach(point => {
                const pos = Cesium.Cartesian3.fromDegrees(point.longitude, point.latitude);

                // --------- Traffic via PointGraphics -----------
                const trafficCount = getTrafficDensityCount(point.traffic_density); // defines how many points
                const trafficColor = getTrafficFlowColor(point.traffic_flow); // inverse of density

                for (let i = 0; i < trafficCount; i++) {
                    // slight random offset to avoid exact overlap
                    const offset = Cesium.Cartesian3.fromDegrees(
                        point.longitude + (Math.random() - 0.5) * 0.0001,
                        point.latitude + (Math.random() - 0.5) * 0.0001,
                        0
                    );

                    viewer.entities.add({
                        name: `Traffic=> density: ${point.traffic_density}, flow:${point.traffic_flow}`,
                        position: offset,
                        heightReference: Cesium.HeightReference.CLAMP_TO_GROUND,
                        point: {
                            pixelSize: 10,
                            color: trafficColor,
                        },
                        properties: {
                            type: 'traffic'   // Tag as clickable
                        }
                    });
                }
            });
        }

        // --- Traffic Density Count ---
        function getTrafficDensityCount(density) {
            switch (density) {
                case 'low': return 1;
                case 'moderate_low': return 3;
                case 'moderate': return 5;
                case 'moderate_high': return 7;
                case 'high': return 10;
                default: return 1;
            }
        }

        // --- Traffic Flow Color (inverse of density) ---
        function getTrafficFlowColor(flow) {
            switch (flow) {
                case 'low': return Cesium.Color.RED;
                case 'moderate_low': return Cesium.Color.ORANGE;
                case 'moderate': return Cesium.Color.YELLOW;
                case 'moderate_high': return Cesium.Color.CYAN;
                case 'high': return Cesium.Color.LIME;
                default: return Cesium.Color.BLUE;
            }
        }
        // --- end traffic methods ---


        // --- Color for AQI level ---
        function showPollution(){
            window.historicalData.forEach(point => {
                const pos = Cesium.Cartesian3.fromDegrees(point.longitude, point.latitude,-5);

                // --------- AQI via EllipsoidGraphics -----------
                const aqiColor = getAqiColor(point.aqi);
                viewer.entities.add({
                    name: `AQI: ${point.aqi} [co:${point.co}, so2:${point.so2}, no2:${point.no2}, pm10:${point.pm10}, pm2.5:${point.pm2_5}]`,
                    position: pos,
                    heightReference: Cesium.HeightReference.CLAMP_TO_GROUND,
                    ellipsoid: {
                        radii: new Cesium.Cartesian3(250, 250, 10),
                        material: aqiColor.withAlpha(0.2),
                    },
                    properties: {
                        type: 'aqi'   // Tag as clickable
                    }
                });
            });
        }

        function getAqiColor(aqi) {
            switch (aqi) {
                case 1: return Cesium.Color.LIME;
                case 2: return Cesium.Color.CYAN;
                case 3: return Cesium.Color.YELLOW;
                case 4: return Cesium.Color.ORANGE;
                case 5: return Cesium.Color.RED;
                default: return Cesium.Color.CYAN;
            }
        }

        // --- end pollution methods

        // --- show weather view ---
        function showWeather(){
                window.forecastData.forEach(point => {
                const pos = Cesium.Cartesian3.fromDegrees(point.longitude, point.latitude, 5);

                // --------- Weather via PolylineArrow -----------
                addCenteredWindArrow(viewer, point.latitude, point.longitude, point.wind_deg, point.wind_speed, (point.temp - 273.15).toFixed(1),point.humidity);

            });
        }

        // --- Weather/ Wind Data---
        function addCenteredWindArrow(viewer, lat, lon, wind_deg, wind_speed, temp, humidity) {
            const length = 0.005 * wind_speed; // arrow total length in degrees
            const heading = Cesium.Math.toRadians(wind_deg);

            // Compute start and end points around the center
            const dx = (length / 2) * Math.sin(heading);
            const dy = (length / 2) * Math.cos(heading);

            const startLon = lon - dx;
            const startLat = lat - dy;
            const endLon = lon + dx;
            const endLat = lat + dy;

            viewer.entities.add({
                name: `Wind: ${wind_speed} m/s, ${wind_deg}°, Temperature: ${temp}°C, Humidity: ${humidity}%`,
                polyline: {
                    positions: Cesium.Cartesian3.fromDegreesArray([
                        startLon, startLat,
                        endLon, endLat
                    ]),
                    positionss: Cesium.Cartesian3.fromDegrees(lon, lat, 0),
                    heightReference: Cesium.HeightReference.CLAMP_TO_GROUND,
                    width: 10,
                    material: new Cesium.PolylineArrowMaterialProperty(Cesium.Color.CYAN),
                },
                label: {
                    text: `💨 ${wind_speed.toFixed(1)} m/s`,
                    font: '14px sans-serif',
                    fillColor: Cesium.Color.DODGERBLUE,
                    showBackground: true,
                    backgroundColor: Cesium.Color.WHITE.withAlpha(0.4),
                    verticalOrigin: Cesium.VerticalOrigin.TOP,
                    pixelOffset: new Cesium.Cartesian2(0, -10),
                    position: Cesium.Cartesian3.fromDegrees(lon, lat),
                    heightReference: Cesium.HeightReference.CLAMP_TO_GROUND,
                },
                properties: {
                    type: 'weather'   // Tag as clickable
                }
            });
        }
        // --- end weather methods ---

        function showCombined() {
            showPollution();
            showWeather();
            showTraffic();
        }


        function computeGeographicMidpoint(locations) {
            let x = 0, y = 0, z = 0;

            locations.forEach(loc => {
                const latRad = Cesium.Math.toRadians(loc.latitude);
                const lonRad = Cesium.Math.toRadians(loc.longitude);

                x += Math.cos(latRad) * Math.cos(lonRad);
                y += Math.cos(latRad) * Math.sin(lonRad);
                z += Math.sin(latRad);
            });

            const total = locations.length;
            x /= total;
            y /= total;
            z /= total;

            const hyp = Math.sqrt(x * x + y * y);
            const lat = Math.atan2(z, hyp);
            const lon = Math.atan2(y, x);

            return {
                latitude: Cesium.Math.toDegrees(lat),
                longitude: Cesium.Math.toDegrees(lon)
            };
        }

        function showAlert(msg, type) {
            $('#alertBox').removeClass().addClass(`alert alert-${type}`).text(msg).fadeIn();
            setTimeout(() => { $('#alertBox').fadeOut(); }, 4000);
        }

        // -- Page events ---

        $("#btnTraffic").click(function (e) {
            e.preventDefault();
            clearEntities();
            showTraffic();
            loadSites();
        });

        $("#btnWeather").click(function (e) {
            e.preventDefault();
            clearEntities();
            showWeather();
            loadSites();
        });

        $("#btnPollution").click(function (e) {
            e.preventDefault();
            clearEntities();
            showPollution();
            loadSites();
        });

        $("#btnCombined").click(function (e) {
            e.preventDefault();
            clearEntities();
            showCombined();
            loadSites();
        });

        $('.menu-buttons button').on('click', function () {
            $('.menu-buttons button').removeClass('active');
            $(this).addClass('active');
        });

        function populateOverlaySites() {
            const container = $('#overlaySiteSelector');
            container.empty();
            let allSelected = true;

            window.siteData.forEach((site, index) => {
                const selected = overlaySelections[site.site_code]?.checked ?? true;
                const density = overlaySelections[site.site_code]?.density ?? 'moderate';

                if (!selected) allSelected = false;

                container.append(`
                    <div class="form-check mt-2">
                        <input type="checkbox" class="form-check-input site-check" id="overlay_site_${index}"
                               data-sitecode="${site.site_code}" data-lat="${site.latitude}" data-lon="${site.longitude}" ${selected ? 'checked' : ''}>
                        <label class="form-check-label" for="overlay_site_${index}">${site.site_name}</label>
                        <select class="form-control form-control-sm traffic-density mt-1">
                            <option value="low" ${density === 'low' ? 'selected' : ''}>Low</option>
                            <option value="moderate_low" ${density === 'moderate_low' ? 'selected' : ''}>Moderate Low</option>
                            <option value="moderate" ${density === 'moderate' ? 'selected' : ''}>Moderate</option>
                            <option value="moderate_high" ${density === 'moderate_high' ? 'selected' : ''}>Moderate High</option>
                            <option value="high" ${density === 'high' ? 'selected' : ''}>High</option>
                        </select>
                    </div>
                `);
            });

            $('#masterCheck').prop('checked', allSelected);
        }
        async function reloadForecastData(datetime){
            const traffic_data_list = [];
            $('.site-check:checked').each(function () {
                const lat = parseFloat($(this).data('lat'));
                const lon = parseFloat($(this).data('lon'));
                const density = $(this).siblings('select.traffic-density').val();
                traffic_data_list.push({ latitude: lat, longitude: lon, traffic_density: density });
            });
            if (traffic_data_list.length === 0) {
                showAlert("Select at least one site.", "warning");
                return;
            }

            const payload = {
                datetime: datetime,
                traffic_data: traffic_data_list
            };


            //$('#loadingSpinner').show();
            try{
            const response = await fetch('/Forecast/GetForecastDataByDate', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            const result = await response.json();
            if (result && result.data) {
                window.forecastData = result.data;
            } else {
                showAlert("No forecast data returned.","warning");
            }
            } catch (error) {
                console.error("Error fetching forecast data:", error);
                showAlert("Failed to fetch forecast data. Please try again.", "danger");
            } finally {
                $('#loadingSpinner').hide();
            }
        }

        $("#queryDate").change(async function (e) {
            e.preventDefault();
            $('#loadingSpinner').show();
            let dateVal = $("#queryDate").val();
            const hourVal = $("#queryHour").val();

            if (!dateVal || !hourVal) {
                $('#loadingSpinner').hide();
                showAlert("Please select both date and hour.","warning");
                return;
            }

            // Construct ISO datetime string
            const datetimeString = `${dateVal} ${hourVal}:00:00`;
            const isoString = datetimeString.replace(" ", "T");  // Convert to ISO format
            const dateObj = new Date(isoString);
            var validateTime = new Date();
            if(dateObj<validateTime){
                $('#loadingSpinner').hide();
                showAlert("Selected datetime should should be current or in future.","danger");
                return;
            }
            await reloadForecastData(datetimeString);

            clearEntities();
            showCombined();
            loadSites();
            $('#loadingSpinner').hide();
        });

        $("#queryHour").change(async function (e) {
            e.preventDefault();
            $('#loadingSpinner').show();
            let dateVal = $("#queryDate").val();
            const hourVal = $("#queryHour").val();

            if (!dateVal || !hourVal) {
                $('#loadingSpinner').hide();
                showAlert("Please select both date and hour.","warning");
                return;
            }

            // Construct ISO datetime string
            const datetimeString = `${dateVal} ${hourVal}:00:00`;
            const isoString = datetimeString.replace(" ", "T");  // Convert to ISO format
            const dateObj = new Date(isoString);
            var validateTime = new Date();
            if(dateObj<validateTime){
                $('#loadingSpinner').hide();
                showAlert("Selected datetime should should be current or in future.","danger");
                return;
            }
            await reloadForecastData(datetimeString);

            clearEntities();
            showCombined();
            loadSites();
            $('#loadingSpinner').hide();
        });



        // --- page events end ---

        // --- overlay function and events ---

        // Build overlay site selectors dynamically (same structure)
        // Show overlay
        $('#btnOpenOverlay').click(function () {
            populateOverlaySites();
            $('#forecastOverlay').fadeIn();
        });

        // Close overlay
        $('#btnCloseOverlay').click(function () {
            $('#forecastOverlay').fadeOut();
        });

        // Master check/uncheck
        $('#forecastOverlay').on('change', '#masterCheck', function () {
            const checked = $(this).is(':checked');
            $('#overlaySiteSelector .site-check').prop('checked', checked);
        });

        // Save overlay selection into main #siteSelector
        $('#btnSaveOverlay').click(function () {
            const mainContainer = $('#hiddenSiteSelector');
            mainContainer.empty();
            $('#overlaySiteSelector .site-check:checked').each(function () {
                const lat = $(this).data('lat');
                const lon = $(this).data('lon');
                const label = $(this).siblings('label').text();
                const density = $(this).siblings('select.traffic-density').val();

                mainContainer.append(`
                    <div class="form-check mt-2">
                        <input type="checkbox" class="form-check-input site-check" checked data-lat="${lat}" data-lon="${lon}">
                        <label class="form-check-label">${label}</label>
                        <select class="form-control form-control-sm traffic-density mt-1">
                            <option value="low" ${density === 'low' ? 'selected' : ''}>Low</option>
                            <option value="moderate_low" ${density === 'moderate_low' ? 'selected' : ''}>Moderate Low</option>
                            <option value="moderate" ${density === 'moderate' ? 'selected' : ''}>Moderate</option>
                            <option value="moderate_high" ${density === 'moderate_high' ? 'selected' : ''}>Moderate High</option>
                            <option value="high" ${density === 'high' ? 'selected' : ''}>High</option>
                        </select>
                    </div>
                `);
            });
            overlaySelections = {}; // Reset
            $('#overlaySiteSelector .site-check').each(function () {
                const siteCode = $(this).data('sitecode');
                const checked = $(this).is(':checked');
                const density = $(this).siblings('select.traffic-density').val();
                overlaySelections[siteCode] = { checked, density };
            });

            $('#forecastOverlay').fadeOut();
        });

        $('#overlaySiteSelector').on('change', '.site-check', function () {
            const allChecked = $('#overlaySiteSelector .site-check').length === $('#overlaySiteSelector .site-check:checked').length;
            $('#masterCheck').prop('checked', allChecked);
        });

        // --- end overlay function and events ---


        // -- default actions ---
        var centrePoint = computeGeographicMidpoint(window.siteData);

        // Camera View set
        viewer.camera.setView({
            destination: Cesium.Cartesian3.fromDegrees(centrePoint.longitude, centrePoint.latitude, 2000.0),
            orientation: {
                heading: Cesium.Math.toRadians(0.0),
                pitch: Cesium.Math.toRadians(-40.0),
                roll: 0.0
            }
        });

        // Rotate north arrow based on camera heading
        viewer.scene.postRender.addEventListener(function () {
            const heading = viewer.camera.heading; // in radians
            const angleDeg = -Cesium.Math.toDegrees(heading); // invert to rotate clockwise
            document.getElementById("northArrow").style.transform = `rotate(${angleDeg}deg)`;
        });

        function loadHandlers(){
            const handler = new Cesium.ScreenSpaceEventHandler(viewer.scene.canvas);
            handler.setInputAction(function (click) {
                const pickedObject = viewer.scene.pick(click.position);
                if (Cesium.defined(pickedObject) && Cesium.defined(pickedObject.id)) {
                    const entity = pickedObject.id;
                    const props = entity.properties;
                    if (props && props.type) {
                        if (props.type.getValue() === "site") {
                            const code = props.site_code.getValue();
                            const match = window.forecastData.find(d => d.site_code === code);
                            if (match) {
                                const html = buildSiteOverlayContent(match);
                                document.getElementById("siteOverlayContent").innerHTML = html;
                                document.getElementById("siteDetailOverlay").style.display = "block";
                            }
                        }
                    }
                }
            }, Cesium.ScreenSpaceEventType.LEFT_CLICK);
        }
        $("#closeOverlayBtn").click(function () {
            $("#siteDetailOverlay").hide();
        });

        clearEntities();
        showCombined();
        loadSites();

    </script>
}