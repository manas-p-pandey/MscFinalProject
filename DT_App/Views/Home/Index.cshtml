@using Newtonsoft.Json

@{
    ViewData["Title"] = "Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var dashboardDataJson = (string)ViewBag.DashboardDataJson;
}

<style>
    .top-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 20px;
        background-color: #f5f5f5;
    }

        .top-bar h2 {
            margin: 0;
        }

    .menu-buttons button {
        width: 50px;
        height: 50px;
        margin-left: 10px;
        background-color: #444;
        color: white;
        border: none;
        font-size: 1.2em;
        cursor: pointer;
        border-radius: 8px;
    }

        .menu-buttons button:hover {
            background-color: #555;
        }

    .main-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%;
        padding: 10px;
    }

    .chart-grid {
        display: grid;
        grid-template-columns: repeat(1, 1fr);
        gap: 20px;
        width: 100%;
    }

    canvas {
        width: 100% !important;
        height: 300px !important;
        border: 1px solid #ccc;
        box-shadow: 2px 2px 6px rgba(0,0,0,0.1);
        border-radius: 6px;
    }
</style>

<div class="top-bar">
    <h2>@ViewData["Title"]</h2>
    <div class="menu-buttons">
        <!-- Add buttons here if needed -->
    </div>
</div>

<div class="main-container">
    <canvas id="lstmChart"></canvas>
    <div style="margin: 20px 0;">
        <label for="modelSelect"><strong>Select XGBoost Regressor Target:</strong></label>
        <select id="modelSelect" onchange="onModelChange()">
            <option value="">-- Select a Target --</option>
            @foreach (var modelName in new[] { "nh3", "so2", "pm10", "no2", "co", "aqi", "o3", "no", "pm2_5" })
            {
                <option value="@modelName">@modelName.ToUpper()</option>
            }
        </select>
    </div>
    <div class="chart-grid" id="regressorCharts"></div>
</div>

@section Scripts {
    
    <script>
        const dashboardData = @Html.Raw(ViewBag.DashboardDataJson);
        const importantModels = ["nh3", "so2", "pm10", "no2", "co", "aqi", "o3", "no", "pm2_5"];
        let currentRegressorChart = null;
    
        function drawLstmChart(stats) {
            if (!stats || !Array.isArray(stats)) return;
            const ctx = document.getElementById('lstmChart').getContext('2d');
            const data = stats.map(stat => ({ x: new Date(stat.Created_at), y: stat.Test_Accuracy }));
    
            new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        label: 'LSTM Accuracy Over Time',
                        data: data,
                        borderColor: 'rgba(75, 192, 192, 1)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        tension: 0.2,
                        fill: false
                    }]
                },
                options: {
                    plugins: {
                        title: {
                            display: true,
                            text: 'LSTM Accuracy Over Time',
                            font: { size: 20, weight: 'bold' }
                        }
                    },
                    scales: {
                        x: {
                            type: 'time',
                            time: { unit: 'day' },
                            title: {
                                display: true,
                                text: 'Date',
                                font: { size: 14, weight: 'bold' }
                            },
                            ticks: { font: { size: 12, weight: 'bold' } }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Accuracy',
                                font: { size: 14, weight: 'bold' }
                            },
                            ticks: { font: { size: 12, weight: 'bold' } }
                        }
                    }
                }
            });
        }
    
        function drawSingleRegressorChart(modelName, stats) {
            const container = document.getElementById("regressorCharts");
            container.innerHTML = '';  // Clear previous chart
    
            if (!modelName || !stats || !Array.isArray(stats)) return;
    
            const filtered = stats.filter(s => s.Model === modelName);
            if (filtered.length === 0) return;
    
            const canvas = document.createElement("canvas");
            container.appendChild(canvas);
    
            const ctx = canvas.getContext('2d');
    
            if (currentRegressorChart) currentRegressorChart.destroy();
    
            currentRegressorChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: filtered.map(d => new Date(d.Created_At)),
                    datasets: [
                        {
                            label: `R²`,
                            data: filtered.map(d => d.R2),
                            borderColor: 'rgba(255, 99, 132, 1)',
                            fill: false
                        },
                        {
                            label: `RMSE`,
                            data: filtered.map(d => d.Rmse),
                            borderColor: 'rgba(54, 162, 235, 1)',
                            fill: false
                        },
                        {
                            label: `MAE`,
                            data: filtered.map(d => d.Mae),
                            borderColor: 'rgba(255, 206, 86, 1)',
                            fill: false
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: `Performance Over Time - ${modelName}`,
                            font: { size: 20, weight: 'bold' }
                        }
                    },
                    scales: {
                        x: {
                            type: 'time',
                            time: { unit: 'day' },
                            title: {
                                display: true,
                                text: 'Date',
                                font: { size: 14, weight: 'bold' }
                            },
                            ticks: { font: { size: 12, weight: 'bold' } }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Metric',
                                font: { size: 14, weight: 'bold' }
                            },
                            ticks: { font: { size: 12, weight: 'bold' } }
                        }
                    }
                }
            });
        }
    
        function onModelChange() {
            const selected = document.getElementById("modelSelect").value;
            drawSingleRegressorChart(selected, dashboardData?.Regressor_Stats);
        }
    
        function renderAllCharts() {
            drawLstmChart(dashboardData?.Lstm_Stats);
        }
    
        renderAllCharts();
    </script>

}
