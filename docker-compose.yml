version: '3.9'

services:
  db:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Admin123
      POSTGRES_DB: mscds
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  api:
    build:
      context: ./RESTAPI
      dockerfile: Dockerfile
    container_name: DT_RestAPI
    ports:
      - "8000:8000"
    volumes:
      - ./RESTAPI:/app
    depends_on:
      - db
    env_file:
      - ./RESTAPI/.env

  mvcapp:
    build:
      context: ./DT_App
      dockerfile: Dockerfile
    container_name: DT_FrontEnd
    ports:
      - "8080:8080"
    depends_on:
      - api
    environment:
      - ASPNETCORE_URLS=http://0.0.0.0:8080

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: manas.p.pandey@outlook.com
      PGADMIN_DEFAULT_PASSWORD: Admin@123
    ports:
      - "5050:80"
    depends_on:
      - db
    volumes:
      - pgadmin_data:/var/lib/pgadmin
  
  kafka:
    image: apache/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://kafka:29093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    ports:
      - "9000:9000"
    environment:
      - KAFKA_BROKERCONNECT=kafka:9092
    depends_on:
      - kafka

  site_consumer:
    container_name: site_consumer
    build: ./ingestion_service
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - POSTGRES_HOST=db
      - POSTGRES_DB=mscds
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Admin123
      - PYTHONUNBUFFERED=1
    command: ["python", "-u", "site_consumer.py"]
    depends_on:
      - kafka
      - db

  aqi_consumer:
    container_name: aqi_consumer
    build: ./ingestion_service
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - POSTGRES_HOST=db
      - POSTGRES_DB=mscds
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Admin123
      - PYTHONUNBUFFERED=1
    command: ["python", "-u", "aqi_consumer.py"]
    depends_on:
      - kafka
      - db

  weather_consumer:
    container_name: weather_consumer
    build: ./ingestion_service
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - POSTGRES_HOST=db
      - POSTGRES_DB=mscds
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Admin123
      - PYTHONUNBUFFERED=1
    command: ["python", "-u", "weather_consumer.py"]
    depends_on:
      - kafka
      - db

  traffic_consumer:
    container_name: traffic_consumer
    build: ./ingestion_service
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - POSTGRES_HOST=db
      - POSTGRES_DB=mscds
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Admin123
      - PYTHONUNBUFFERED=1
    command: ["python", "-u", "traffic_consumer.py"]
    depends_on:
      - kafka
      - db
  
  forecast_consumer:
    container_name: forecast_consumer
    build: ./ingestion_service
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - POSTGRES_HOST=db
      - POSTGRES_DB=mscds
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Admin123
      - PYTHONUNBUFFERED=1
    command: ["python", "-u", "forecast_consumer.py"]
    depends_on:
      - kafka
      - db

  main_producer:
    container_name: all_data_producer_sync
    build: ./ingestion_service
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - POSTGRES_HOST=db
      - POSTGRES_DB=mscds
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Admin123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OPENWEATHER_API_KEY=0fb0f50c2badb10762006b6384c5b5da
      - REST_HOST=api
      - REST_PORT=8000
      - PYTHONUNBUFFERED=1
    command: ["python", "-u", "main_producer.py"]
    depends_on:
      - db
      - kafka
      - redis
      - site_consumer
      - aqi_consumer
      - weather_consumer
      - traffic_consumer
      - forecast_consumer
  
  redis:
    image: redis:latest
    container_name: my-redis-server
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=Admin123

  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=Admin123
    ports:
      - "8081:8081"
    depends_on:
      - redis

volumes:
  pgdata:
  pgadmin_data:
  redis_data:
