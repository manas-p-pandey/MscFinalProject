PostgreSQL
---------------------
docker pull: docker pull postgres

docker run: docker run --name postgres \
  -e POSTGRES_USER=postgres \
  -e POSTGRES_PASSWORD=Admin123 \
  -e POSTGRES_DB=mscds \
  -p 5432:5432 \
  -d postgres

user: postgres
password: Admin123
url: http://localhost:5432

PGadmin 4
---------------------------------------
docker pull: docker pull dpage/pgadmin4

docker run: docker run --name pgadmin -p 5050:80 -e PGADMIN_DEFAULT_EMAIL=manas.p.pandey@outlook.com -e PGADMIN_DEFAULT_PASSWORD=Admin@123 -d dpage/pgadmin4

user: manas.p.pandey@outlook.com
password: Admin@123
url: http://localhost:5050/


Use this in pgAdmin:
Host name/address: db
Port: 5432
Username: mscds
Password: Admin123


Kafka with/without Kafdrop UI container
--------------------------------------
docker-compose up --build <kafka|kafdrop>
docker-compose stop <kafka|kafdrop>
docker-compose rm -sf <kafka|kafdrop>

http://localhost:9000/




Redis with/without Redis commander UI container
--------------------------------------
docker-compose up --build <redis|redis-commander>
docker-compose stop <redis|redis-commander>
docker-compose rm -sf <redis|redis-commander>




Python Workspace Setup - RESTAPI
--------------------------------
RESTAPI_AND_DBPIPELINE
├── app/
│   ├── __init__.py
│   ├── main.py
│   ├── models/
│   │   └── user.py
│   ├── schemas/
│   │   └── user.py
│   ├── api/
│   │   └── routes/
│   │       └── user.py
│   ├── services/
│   │   └── user_service.py
│   ├── core/
│   │   ├── config.py
│   │   └── database.py
├── alembic/
│   └── versions/
├── alembic.ini
├── .env
├── Dockerfile
├── docker-compose.yml
├── requirements.txt
└── run.py
alembic init alembic

setup virtual environment
-------------------------

python -m venv .venv

.\.venv\Scripts\activate

pip install -r requirements.txt

Test Database connection
------------------------



To Run from VS Terminal
-----------------------
python run.py


To Deploy Entire Project on docker
------------------------------
remove existing container and image:
docker-compose down -v

update image and run container:
docker-compose up --build

run specific container in docker compose:
docker-compose restart web

Docker Compose commands
------------------------

✅ Usage

▶️ Start (up) a specific container
docker-compose up <service-name>
📌 Example:
docker-compose up mvcapp
* Starts only mvcapp and its depends_on containers (like db if listed).

🔁 Rebuild and start only one container
docker-compose up --build <service-name>
⏹️ Stop a specific container
docker-compose stop <service-name>
❌ Take down a specific container
docker-compose rm -sf <service-name>
* -s skips confirmation; -f forces removal.

📋 To see all available services:
docker-compose config --services



Swagger for Debug and Test
--------------------------
http://localhost:8000/docs


API for AQI using openweathermap
---------------------------------

https://openweathermap.org/api/air-pollution

api_key: 0fb0f50c2badb10762006b6384c5b5da


historic
http://api.openweathermap.org/data/2.5/air_pollution/history?lat={lat}&lon={lon}&start={start}&end={end}&appid={API key}

forecast
http://api.openweathermap.org/data/2.5/air_pollution/forecast?lat={lat}&lon={lon}&appid={API key}

APIKey for OpenWeather
--------------------------------
username: pandeym@roehampton.ac.uk
password: Admin@123
dashboard url = https://home.openweathermap.org/
api_key: 0fb0f50c2badb10762006b6384c5b5da

url = https://api.openweathermap.org/data/3.0/onecall?lat=33.44&lon=-94.04&exclude=current,minutely,daily,alerts&appid=0fb0f50c2badb10762006b6384c5b5da




API Details for Traffic TFL
--------------------------------

username: mpandey@roehampton.ac.uk
password: Admin@123
dashboard url: https://api-portal.tfl.gov.uk/

road api url = https://api.tfl.gov.uk/Road/all/Street/Disruption[?startDate][&endDate]

API Details for Traffic Flow from TOM TOM API
---------------------------------------------

To obtain traffic congestion data for a specific location using TomTom APIs, you'll primarily use the Traffic Flow API and potentially the Traffic Incidents API. The Traffic Flow API provides real-time road speed and travel time information, while the Traffic Incidents API offers details on incidents like accidents or road closures. By combining these APIs, you can get a comprehensive view of traffic conditions at a given latitude and longitude with varying degrees of severity. 
Here's a breakdown of how to approach this:
1. Understand the APIs:
Traffic Flow API:
This API provides current speed, free-flow speed (speed under ideal conditions), current travel time, and free-flow travel time for road segments. You can query this API by providing a location (latitude and longitude) on or near the road segment you're interested in. 
Traffic Incidents API:
This API delivers information about traffic incidents such as accidents, road closures, and construction zones. It provides details like the incident's location, severity, and length (in time). 
2. Request Data:
Traffic Flow Data:
You'll need to make a GET request to the Traffic Flow API endpoint, specifying the latitude and longitude of your desired location. 
The response will include currentSpeed, freeFlowSpeed, currentTravelTime, and freeFlowTravelTime for the road segment near your specified coordinates. 
The confidence value in the response indicates the reliability of the speed data. 
Traffic Incident Data:
Use the Traffic Incidents API to retrieve details about incidents near your location. 
You'll likely need to filter the results based on your specific location (latitude and longitude) to get relevant incident data. 
3. Interpret the Results:
Severity:
The severity of traffic congestion can be inferred from the comparison of currentSpeed and freeFlowSpeed (or travel times) from the Traffic Flow API. A significant difference indicates congestion. The Traffic Incidents API provides explicit severity information for incidents.
Traffic Flow Data Interpretation:
currentSpeed close to freeFlowSpeed means traffic is flowing well.
A lower currentSpeed than freeFlowSpeed suggests congestion, with the difference indicating the severity.
Traffic Incident Data Interpretation:
The incident's type and length fields in the Traffic Incidents API provide information about the nature and duration of the disruption. 

